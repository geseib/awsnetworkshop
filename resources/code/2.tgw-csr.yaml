AWSTemplateFormatVersion: "2010-09-09"
Description: "Add Transit Gateway and Datacenter Router"

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "VPC Parameters"
        Parameters:
          - AvailabilityZoneA
          - AvailabilityZoneB

Parameters:
  ParentStack:
    Description: "Name of the CFN Stack for VPCs"
    Type: String
    Default: "tgw"

  KeyPair:
    Description: "Keypair to access the CSR or Juniper"
    Type: "AWS::EC2::KeyPair::KeyName"
    Default: "csr1000v-tgw"
 
  RouterChoice: 
    Description: Juniper, Cisco or StrongSwan Datacenter Router.
    Default: Cisco
    Type: String
    AllowedValues: 
      - Cisco
      - Juniper
      - StrongSwan
    ConstraintDescription: must specify Cisco, Juniper, or StrongSwan.
Conditions: 
  CreateCiscoCSR: !Equals [ !Ref RouterChoice, Cisco ]
  CreateJuniperSRX: !Equals [ !Ref RouterChoice, Juniper ]
  CreateStrongSwan: !Equals [ !Ref RouterChoice, StrongSwan]

Mappings:
  # AMI for Cisco CSR1kv and Juniper SRX
  RegionMap:
    'eu-north-1': 
        'CSRAMI': "ami-01ba12d895b5a38b0"
        'SRXAMI': "ami-05f0bf0004d897cd4"
        'SWANAMI': "ami-0b7a46b4bd694e8a6"
    'ap-south-1': 
        'CSRAMI': "ami-091d21d09823ec134"
        'SRXAMI': "ami-03af9c5ca9f7dc439"
        'SWANAMI': "ami-0470e33cd681b2476"
    'eu-west-3': 
        'CSRAMI': "ami-01b2e74381d614c9f"
        'SRXAMI': "ami-001de4508040d47f3"
        'SWANAMI': "ami-00077e3fed5089981"
    'eu-west-2': 
        'CSRAMI': "ami-05fecfb63c095734c"
        'SRXAMI': "ami-03bad381feea144a7"
        'SWANAMI': "ami-01a6e31ac994bbc09"
    'eu-west-1': 
        'CSRAMI': "ami-0be86973d568c44f9"
        'SRXAMI': "ami-06bd440013b81fb62"
        'SWANAMI': "ami-06ce3edf0cff21f07"
    'ap-northeast-3': 
        'CSRAMI': "ami-04606393d0137bd2d"
        'SWANAMI': "ami-028238ef8d1df506f"
    'ap-northeast-2': 
        'CSRAMI': "ami-0c8205ed92456f139"
        'SRXAMI': "ami-02cdb6b1e05d0b892"
        'SWANAMI': "ami-01288945bd24ed49a"
    'ap-northeast-1': 
        'CSRAMI': "ami-073c200f81aa01c74"
        'SRXAMI': "ami-0b6e00703ed66b38f"
        'SWANAMI': "ami-0f310fced6141e627"
    'sa-east-1': 
        'CSRAMI': "ami-0aca8cef375484124"
        'SRXAMI': "ami-0db94fe1b7054c941"
        'SWANAMI': "ami-003449ffb2605a74c"
    'ca-central-1': 
        'CSRAMI': "ami-05cd01b176c1ed632"
        'SRXAMI': "ami-0a98e40baef586cd9"
        'SWANAMI': "ami-054362537f5132ce2"
    'ap-southeast-1': 
        'CSRAMI': "ami-057079fcc266a5fd2"
        'SRXAMI': "ami-0202abb09bbfff8e8"
        'SWANAMI': "ami-0ec225b5e01ccb706"
    'ap-southeast-2': 
        'CSRAMI': "ami-085ed82cdf4adab40"
        'SRXAMI': "ami-0130411dfd49760f1"
        'SWANAMI': "ami-0970010f37c4f9c8d"
    'eu-central-1': 
        'CSRAMI': "ami-0abb603bd69a2b763"
        'SRXAMI': "ami-04bc759966295c78d"
        'SWANAMI': "ami-076431be05aaf8080"
    'us-east-1': 
        'CSRAMI': "ami-06fb3765405ee3735"
        'SRXAMI': "ami-016c15d19bd2cbf61"
        'SWANAMI': "ami-0323c3dd2da7fb37d"
    'us-east-2': 
        'CSRAMI': "ami-0baf9674ec64b2b3c"
        'SRXAMI': "ami-0608e55bfecf32e4e"
        'SWANAMI': "ami-0f7919c33c90f5b58"
    'us-west-1': 
        'CSRAMI': "ami-084708bd4b3e2c014"
        'SRXAMI': "ami-0f7ec4e60b482365a"
        'SWANAMI': "ami-06fcc1f0bc2c8943f"
    'us-west-2': 
        'CSRAMI': "ami-0c8daf2aad72a2d17"
        'SRXAMI': "ami-047df409d805388cd"
        'SWANAMI': "ami-0d6621c01e8c2de2c"

Resources:
  # Create Transit Gateway
  TransitGateway:
    Type: "AWS::EC2::TransitGateway"
    Properties:
      AmazonSideAsn: 65000
      Description: "TGW Route Integration Test"
      AutoAcceptSharedAttachments: "enable"
      DefaultRouteTableAssociation: "disable"
      DnsSupport: "enable"
      VpnEcmpSupport: "enable"
      Tags:
        - Key: Name
          Value: !Ref ParentStack
        - Key: Application
          Value: !Ref "AWS::StackId"

  # Transit Gateway Route Table Creation

  RouteTableGreen:
    Type: "AWS::EC2::TransitGatewayRouteTable"
    Properties:
      Tags:
        - Key: Name
          Value: Green Route Table
      TransitGatewayId: !Ref TransitGateway

  RouteTableRed:
    Type: "AWS::EC2::TransitGatewayRouteTable"
    Properties:
      Tags:
        - Key: Name
          Value: Red Route Table
      TransitGatewayId: !Ref TransitGateway

  RouteTableBlue:
    Type: "AWS::EC2::TransitGatewayRouteTable"
    Properties:
      Tags:
        - Key: Name
          Value: Blue Route Table
      TransitGatewayId: !Ref TransitGateway

  # Customer Gateway for TGW to DC1 Connectivity
  CiscoCustomerGateway:
    Condition: CreateCiscoCSR
    Type: AWS::EC2::CustomerGateway
    DependsOn: CSRIP
    Properties:
      BgpAsn: 65001
      IpAddress: !Ref CSRIP
      Tags:
        - Key: Name
          Value: DC1-CGW
      Type: ipsec.1

  JuniperCustomerGateway:
    Condition: CreateJuniperSRX
    Type: AWS::EC2::CustomerGateway
    DependsOn: vSRXEip12
    Properties:
      BgpAsn: 65001
      IpAddress: !Ref vSRXEip12
      Tags:
        - Key: Name
          Value: DC1-CGW
      Type: ipsec.1
  
  SwanCustomerGateway:
    Condition: CreateStrongSwan
    Type: AWS::EC2::CustomerGateway
    DependsOn: SwanIP
    Properties:
      BgpAsn: 65001
      IpAddress: !Ref SwanIP
      Tags:
        - Key: Name
          Value: DC1-CGW
      Type: ipsec.1

# CSRVPN Router in the Datacenter

  CSRIP:
    Condition: CreateCiscoCSR
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  ServerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [DC1, Ref: "AWS::StackName", "SSMRole"]]
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref ServerRole

  CSRSecGroup:
    Condition: CreateCiscoCSR
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open-up ports for local VPC and SSH
      GroupName: !Join ["-", [CSR, Ref: "AWS::StackName", "sec-group"]]
      VpcId:
        Fn::ImportValue: !Sub "DC1-${ParentStack}-VPC"
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 10.4.0.0/16

  CSRENI:
    Condition: CreateCiscoCSR
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId:
        Fn::ImportValue: !Sub "DC1-${ParentStack}-PublicSubnetA"
      Description: Interface for controlling traffic such as SSH
      GroupSet:
        - Ref: CSRSecGroup
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: CSR

  CSRInstance:
    Condition: CreateCiscoCSR
    Type: AWS::EC2::Instance
    Properties:
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref CSRENI
          DeviceIndex: 0
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", CSRAMI]
      InstanceType: c4.large
      KeyName: !Ref KeyPair
      IamInstanceProfile:
        Ref: InstanceProfile
      Tags:
        - Key: Name
          Value: !Sub "DC1-${AWS::StackName}-CSR"

  AssociateCSREIP:
    Condition: CreateCiscoCSR
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt CSRIP.AllocationId
      NetworkInterfaceId: !Ref CSRENI

  PrivateDefaultRoute:
    Condition: CreateCiscoCSR
    Type: AWS::EC2::Route
    DependsOn: CSRENI
    Properties:
      RouteTableId:
        Fn::ImportValue: !Sub "DC1-${ParentStack}-PrivateRouteTable"
      DestinationCidrBlock: 10.0.0.0/11
      NetworkInterfaceId:
        Ref: CSRENI

# Create Juniper SRX Router

  vSRXEip12:
    Condition: CreateJuniperSRX
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  AssociateEIP12:
    Condition: CreateJuniperSRX
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId:
        Fn::GetAtt:
          - vSRXEip12
          - AllocationId
      NetworkInterfaceId:
        Ref: vSRXInterface12

  vSRXInterface10:
    Condition: CreateJuniperSRX
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: vSRXMgmtInterface10
      PrivateIpAddress: 10.4.8.10
      SourceDestCheck: "false"
      GroupSet:
        - Ref: VSRXSecurityGroup
      SubnetId:
        Fn::ImportValue: !Sub "DC1-${ParentStack}-PrivateSubnetA"

  vSRXInterface11:
    Condition: CreateJuniperSRX
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: vSRXRevenueInterface11
      PrivateIpAddress: 10.4.8.11
      SourceDestCheck: "false"
      GroupSet:
        - Ref: VSRXSecurityGroup
      SubnetId:
        Fn::ImportValue: !Sub "DC1-${ParentStack}-PrivateSubnetA"

  vSRXInterface12:
    Condition: CreateJuniperSRX
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: vSRXRevenueInterface12
      PrivateIpAddress: 10.4.0.12
      SourceDestCheck: "false"
      GroupSet:
        - Ref: VSRXSecurityGroup
      SubnetId:
        Fn::ImportValue: !Sub "DC1-${ParentStack}-PublicSubnetA"

  VpcvSRX1:
    Condition: CreateJuniperSRX
    Type: AWS::EC2::Instance
    Metadata:
      Comment1: Launch Juniper VSRX1
    Properties:
      InstanceType:
        c5.2xlarge
      KeyName:
        Ref: KeyPair
      ImageId:
        Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - SRXAMI
      NetworkInterfaces:
        - NetworkInterfaceId:
            Ref: vSRXInterface10
          DeviceIndex: "0"
        - NetworkInterfaceId:
            Ref: vSRXInterface11
          DeviceIndex: "1"
        - NetworkInterfaceId:
            Ref: vSRXInterface12
          DeviceIndex: "2"
      Tags:
        - Key: Name
          Value: !Sub "DC1-${AWS::StackName}-vSRX"

  VSRXSecurityGroup:
    Condition: CreateJuniperSRX
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: VSRX Security Group Rules
      VpcId:
        Fn::ImportValue: !Sub "DC1-${ParentStack}-VPC"
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 10.4.0.0/16
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: "0"
          ToPort: "65535"
          CidrIp: 0.0.0.0/0

  SRXPrivateDefaultRoute:
    Condition: CreateJuniperSRX
    Type: AWS::EC2::Route
    DependsOn: vSRXInterface11
    Properties:
      RouteTableId:
        Fn::ImportValue: !Sub "DC1-${ParentStack}-PrivateRouteTable"
      DestinationCidrBlock: 10.0.0.0/11
      NetworkInterfaceId:
        Ref: vSRXInterface11

#StrongSwan VPN
  SwanSecGroup:
    Condition: CreateStrongSwan
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: StrongSwan Security Group Rules
      VpcId:
        Fn::ImportValue: !Sub "DC1-${ParentStack}-VPC"
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 10.4.0.0/16
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: "0"
          ToPort: "65535"
          CidrIp: 0.0.0.0/0

  SwanIP:
    Condition: CreateStrongSwan
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  SwanInterface:
    Condition: CreateStrongSwan
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId:
        Fn::ImportValue: !Sub "DC1-${ParentStack}-PublicSubnetA"
      Description: Interface for VPN and SSH
      GroupSet:
        - Ref: SwanSecGroup
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: StrongSwan

  SwanEIPAssoc:
    Condition: CreateStrongSwan
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt SwanIP.AllocationId
      NetworkInterfaceId: !Ref SwanInterface

  SwanInstance:
    Type: AWS::EC2::Instance
    Condition: CreateStrongSwan
    DependsOn:
    - SwanInterface
    Properties:
      IamInstanceProfile:
        Ref: InstanceProfile
      ImageId:
        Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - SWANAMI
      InstanceType: t3.nano
      KeyName: !Ref KeyPair
      NetworkInterfaces:
      - DeviceIndex: 0
        NetworkInterfaceId:
          Ref: SwanInterface
      SourceDestCheck: false
      Tags:
      - Key: Name
        Value: StrongSwan VPN
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            amazon-linux-extras install epel
            yum install -y strongswan quagga
            groupadd -r quagga
            groupadd -r quaggavt
            useradd -r -g quagga quagga
            cp /usr/share/doc/quagga-*/zebra.conf.sample /etc/quagga/zebra.conf
            cp /usr/share/doc/quagga-*/bgpd.conf.sample /etc/quagga/bgpd.conf
            chown -R quagga:quagga /etc/quagga
            systemctl enable zebra
            systemctl enable bgpd
            echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
            sysctl -p /etc/sysctl.conf
            PUBLICIP=$(curl -s http://169.254.169.254/2018-09-24/meta-data/public-ipv4)
            PRIVATEIP=$(curl -s http://169.254.169.254/2018-09-24/meta-data/local-ipv4)
            cat <<EOT >/etc/strongswan/ipsec.conf
            conn %default
              leftauth=psk
              rightauth=psk
              ike=aes128-sha1-modp1024!
              ikelifetime=28800s
              aggressive=no
              esp=aes128-sha1-modp1024!
              type=tunnel
              dpddelay=10s
              dpdtimeout=30s
              keyexchange=ikev1
              rekey=yes
              reauth=no
              dpdaction=restart
              closeaction=restart
              leftsubnet=0.0.0.0/0
              rightsubnet=0.0.0.0/0
              leftupdown=/etc/ipsec-vti.sh
              installpolicy=yes
              compress=no
              mobike=no

            conn dc2aws1
              left={PRIVATE_IP}
              leftid={PUBLIC_IP}
              right=TUNNEL_1_IP
              rightid=TUNNEL_1_IP
              auto=start
              mark=100

            conn dc2aws2
              left={PRIVATE_IP}
              leftid={PUBLIC_IP}
              right=TUNNEL_2_IP
              rightid=TUNNEL_2_IP
              auto=start
              mark=200

            EOT
            cat <<'EOT' >>/etc/ipsec-vti.sh
            IP=$(which ip)
            IPTABLES=$(which iptables)

            PLUTO_MARK_OUT_ARR=(${!PLUTO_MARK_OUT//// })
            PLUTO_MARK_IN_ARR=(${!PLUTO_MARK_IN//// })
            case "${!PLUTO_CONNECTION}" in
              dc2aws1)
                VTI_INTERFACE=vti1
                VTI_LOCALADDR=169.254.10.2/30
                VTI_REMOTEADDR=169.254.10.1/30
                ;;
              dc2aws2)
                VTI_INTERFACE=vti2
                VTI_LOCALADDR=169.254.11.2/30
                VTI_REMOTEADDR=169.254.11.1/30
                ;;
              dc2aws3)
                VTI_INTERFACE=vti3
                VTI_LOCALADDR=169.254.12.2/30
                VTI_REMOTEADDR=169.254.12.1/30
                ;;
              dc2aws4)
                VTI_INTERFACE=vti4
                VTI_LOCALADDR=169.254.13.2/30
                VTI_REMOTEADDR=169.254.13.1/30
                ;;
            esac

            case "${!PLUTO_VERB}" in
              up-client)
                ${!IP} link add ${!VTI_INTERFACE} type vti local ${!PLUTO_ME} remote ${!PLUTO_PEER} okey ${!PLUTO_MARK_OUT_ARR[0]} ikey ${!PLUTO_MARK_IN_ARR[0]}
                sysctl -w net.ipv4.conf.${!VTI_INTERFACE}.disable_policy=1
                sysctl -w net.ipv4.conf.${!VTI_INTERFACE}.rp_filter=2 || sysctl -w net.ipv4.conf.${!VTI_INTERFACE}.rp_filter=0
                ${!IP} addr add ${!VTI_LOCALADDR} remote ${!VTI_REMOTEADDR} dev ${!VTI_INTERFACE}
                ${!IP} link set ${!VTI_INTERFACE} up mtu 1436
                ${!IPTABLES} -t mangle -I FORWARD -o ${!VTI_INTERFACE} -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
                ${!IPTABLES} -t mangle -I INPUT -p esp -s ${!PLUTO_PEER} -d ${!PLUTO_ME} -j MARK --set-xmark ${!PLUTO_MARK_IN}
                ${!IP} route flush table 220
                ;;
              down-client)
                ${!IP} link del ${!VTI_INTERFACE}
                ${!IPTABLES} -t mangle -D FORWARD -o ${!VTI_INTERFACE} -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
                ${!IPTABLES} -t mangle -D INPUT -p esp -s ${!PLUTO_PEER} -d ${!PLUTO_ME} -j MARK --set-xmark ${!PLUTO_MARK_IN}
                ;;
            esac

            sysctl -w net.ipv4.ip_forward=1
            sysctl -w net.ipv4.conf.eth0.disable_xfrm=1
            sysctl -w net.ipv4.conf.eth0.disable_policy=1

            EOT
            chmod +x /etc/ipsec-vti.sh
            sed -i "s/{PUBLIC_IP}/$PUBLICIP/g" /etc/strongswan/ipsec.conf
            sed -i "s/{PRIVATE_IP}/$PRIVATEIP/g" /etc/strongswan/ipsec.conf
            echo "$PUBLICIP $PRIVATEIP : PSK \"awsamazon\"" >> /etc/strongswan/ipsec.secrets
            systemctl enable strongswan
            
  SwanPrivateDefaultRoute:
    Condition: CreateStrongSwan
    Type: AWS::EC2::Route
    DependsOn: SwanInterface
    Properties:
      RouteTableId:
        Fn::ImportValue: !Sub "DC1-${ParentStack}-PrivateRouteTable"
      DestinationCidrBlock: 10.0.0.0/11
      NetworkInterfaceId:
        Ref: SwanInterface

# Create NAT Gateway for BindServer To Get out to Internet

  DC1NATEIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  DC1NATGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - DC1NATEIP
          - AllocationId
      SubnetId:
        Fn::ImportValue: !Sub "DC1-${ParentStack}-PublicSubnetA"
      Tags:
        - Key: Name
          Value: !Join ["-", [DC1, "AWS::StackName", NATGW]]

  PrivateDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: DC1NATGateway
    Properties:
      RouteTableId:
        Fn::ImportValue: !Sub "DC1-${ParentStack}-PrivateRouteTable"
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: DC1NATGateway

  PrivateAWSRoute:
    Condition: CreateCiscoCSR
    Type: AWS::EC2::Route
    DependsOn: CSRENI
    Properties:
      RouteTableId:
        Fn::ImportValue: !Sub "DC1-${ParentStack}-PrivateRouteTable"
      DestinationCidrBlock: 10.0.0.0/11
      NetworkInterfaceId:
        Ref: CSRENI
  
  PublicAWSRoute:
    Condition: CreateCiscoCSR
    Type: AWS::EC2::Route
    DependsOn: CSRENI
    Properties:
      RouteTableId:
        Fn::ImportValue: !Sub "DC1-${ParentStack}-PublicRouteTable"
      DestinationCidrBlock: 10.0.0.0/11
      NetworkInterfaceId:
        Ref: CSRENI

  # Non-Prod 1 Connect to the Transit Gateway
  AttachNP1:
    Type: "AWS::EC2::TransitGatewayAttachment"
    Properties:
      SubnetIds:
        - Fn::ImportValue: !Sub "NP1-${ParentStack}-AttachSubnetA"
        - Fn::ImportValue: !Sub "NP1-${ParentStack}-AttachSubnetB"
      Tags:
        - Key: Name
          Value: NP1Attach
      TransitGatewayId: !Ref TransitGateway
      VpcId:
        Fn::ImportValue: !Sub "NP1-${ParentStack}-VPC"

  AssociateNP1RouteTable:
    Type: "AWS::EC2::TransitGatewayRouteTableAssociation"
    Properties:
      TransitGatewayAttachmentId: !Ref AttachNP1
      TransitGatewayRouteTableId: !Ref RouteTableRed

  PropagateNP1Red:
    Type: "AWS::EC2::TransitGatewayRouteTablePropagation"
    Properties:
      TransitGatewayAttachmentId: !Ref AttachNP1
      TransitGatewayRouteTableId: !Ref RouteTableRed

  PropagateNP1Green:
    Type: "AWS::EC2::TransitGatewayRouteTablePropagation"
    Properties:
      TransitGatewayAttachmentId: !Ref AttachNP1
      TransitGatewayRouteTableId: !Ref RouteTableGreen

  # Non-Prod 2 Connect to the Transit Gateway
  AttachNP2:
    Type: "AWS::EC2::TransitGatewayAttachment"
    Properties:
      SubnetIds:
        - Fn::ImportValue: !Sub "NP2-${ParentStack}-AttachSubnetA"
        - Fn::ImportValue: !Sub "NP2-${ParentStack}-AttachSubnetB"
      Tags:
        - Key: Name
          Value: NP2Attach
      TransitGatewayId: !Ref TransitGateway
      VpcId:
        Fn::ImportValue: !Sub "NP2-${ParentStack}-VPC"

  AssociateNP2RouteTable:
    Type: "AWS::EC2::TransitGatewayRouteTableAssociation"
    Properties:
      TransitGatewayAttachmentId: !Ref AttachNP2
      TransitGatewayRouteTableId: !Ref RouteTableRed

  PropagateNP2Red:
    Type: "AWS::EC2::TransitGatewayRouteTablePropagation"
    Properties:
      TransitGatewayAttachmentId: !Ref AttachNP2
      TransitGatewayRouteTableId: !Ref RouteTableRed

  PropagateNP2Green:
    Type: "AWS::EC2::TransitGatewayRouteTablePropagation"
    Properties:
      TransitGatewayAttachmentId: !Ref AttachNP2
      TransitGatewayRouteTableId: !Ref RouteTableGreen

  # Prod 1 Connect to the Transit Gateway
  AttachP1:
    Type: "AWS::EC2::TransitGatewayAttachment"
    Properties:
      SubnetIds:
        - Fn::ImportValue: !Sub "P1-${ParentStack}-AttachSubnetA"
        - Fn::ImportValue: !Sub "P1-${ParentStack}-AttachSubnetB"
      Tags:
        - Key: Name
          Value: P1Attach
      TransitGatewayId: !Ref TransitGateway
      VpcId:
        Fn::ImportValue: !Sub "P1-${ParentStack}-VPC"

  AssociateP1RouteTable:
    Type: "AWS::EC2::TransitGatewayRouteTableAssociation"
    Properties:
      TransitGatewayAttachmentId: !Ref AttachP1
      TransitGatewayRouteTableId: !Ref RouteTableBlue

  PropagateP1Blue:
    Type: "AWS::EC2::TransitGatewayRouteTablePropagation"
    Properties:
      TransitGatewayAttachmentId: !Ref AttachP1
      TransitGatewayRouteTableId: !Ref RouteTableBlue

  PropagateP1Green:
    Type: "AWS::EC2::TransitGatewayRouteTablePropagation"
    Properties:
      TransitGatewayAttachmentId: !Ref AttachP1
      TransitGatewayRouteTableId: !Ref RouteTableGreen

  # Datacenter Services 1 Connect to the Transit Gateway
  AttachDCS1:
    Type: "AWS::EC2::TransitGatewayAttachment"
    Properties:
      SubnetIds:
        - Fn::ImportValue: !Sub "DCS1-${ParentStack}-AttachSubnetA"
        - Fn::ImportValue: !Sub "DCS1-${ParentStack}-AttachSubnetB"
      Tags:
        - Key: Name
          Value: DCS1Attach
      TransitGatewayId: !Ref TransitGateway
      VpcId:
        Fn::ImportValue: !Sub "DCS1-${ParentStack}-VPC"

  AssociateDCS1RouteTable:
    Type: "AWS::EC2::TransitGatewayRouteTableAssociation"
    Properties:
      TransitGatewayAttachmentId: !Ref AttachDCS1
      TransitGatewayRouteTableId: !Ref RouteTableGreen

  PropagateDCS1Red:
    Type: "AWS::EC2::TransitGatewayRouteTablePropagation"
    Properties:
      TransitGatewayAttachmentId: !Ref AttachDCS1
      TransitGatewayRouteTableId: !Ref RouteTableRed

  PropagateDCS1Blue:
    Type: "AWS::EC2::TransitGatewayRouteTablePropagation"
    Properties:
      TransitGatewayAttachmentId: !Ref AttachDCS1
      TransitGatewayRouteTableId: !Ref RouteTableBlue

  PropagateDCS1Green:
    Type: "AWS::EC2::TransitGatewayRouteTablePropagation"
    Properties:
      TransitGatewayAttachmentId: !Ref AttachDCS1
      TransitGatewayRouteTableId: !Ref RouteTableGreen

  DefaultRouteRed:
    Type: "AWS::EC2::TransitGatewayRoute"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      TransitGatewayAttachmentId: !Ref AttachDCS1
      TransitGatewayRouteTableId: !Ref RouteTableRed

  DefaultRouteBlue:
    Type: "AWS::EC2::TransitGatewayRoute"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      TransitGatewayAttachmentId: !Ref AttachDCS1
      TransitGatewayRouteTableId: !Ref RouteTableBlue

  DCS1PublicInternalRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachDCS1
    Properties:
      DestinationCidrBlock: 10.0.0.0/8
      TransitGatewayId: !Ref TransitGateway
      RouteTableId:
        Fn::ImportValue:
          !Sub "DCS1-${ParentStack}-PublicRouteTable"

  NP2PrivateDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachNP2
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      TransitGatewayId: !Ref TransitGateway
      RouteTableId:
        Fn::ImportValue:
          !Sub "NP2-${ParentStack}-PrivateRouteTable"
 
  P1PrivateDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachP1
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      TransitGatewayId: !Ref TransitGateway
      RouteTableId:
        Fn::ImportValue:
          !Sub "P1-${ParentStack}-PrivateRouteTable"
          
Outputs:
  # Datacenter 1 Outputs
  CSRSSH:
    Condition: CreateCiscoCSR
    Description: "ssh command to CSR"
    Value:
      !Join [
        "",
        ["ssh -i ~/.ssh/", Ref: "KeyPair", ".pem ec2-user@", !GetAtt "CSRENI.PrimaryPrivateIpAddress"],
      ]
    Export:
      Name: !Sub "DC1-${AWS::StackName}-CSRssh"

  VSRXIPAddress:
    Condition: CreateJuniperSRX
    Description: ssh command for VSRX
    Value:
      !Join [
        "",
        ["ssh -i ~/.ssh/", Ref: "KeyPair", ".pem ec2-user@", !GetAtt "vSRXInterface10.PrimaryPrivateIpAddress"],
      ]
    Export:
      Name: !Sub "DC1-${AWS::StackName}-SRXssh"

  StrongSwanAddress:
    Condition: CreateStrongSwan
    Description: ssh command for StrongSwan
    Value:
      !Join [
        "",
        ["ssh -i ~/.ssh/", Ref: "KeyPair", ".pem ec2-user@", !GetAtt "SwanInterface.PrimaryPrivateIpAddress"],
      ]
    Export:
      Name: !Sub "DC1-${AWS::StackName}-Swanssh"
